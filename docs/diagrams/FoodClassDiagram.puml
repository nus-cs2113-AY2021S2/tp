@startuml FoodClassDiagram
!include style.puml
allow_mixing
skinparam arrowThickness 1.1
skinparam arrowColor FOOD_COLOR_T4
skinparam classAttributeIconSize 0
skinparam classBackgroundColor FOOD_COLOR_T1
skinparam classAttributeIconSize 0
skinparam groupInheritance 3

package "Food Component" <<Rectangle>> {
  abstract class Food
  enum FoodCategory
  enum FoodStorageLocation
  class ExpiryDate
  class Fridge
  class UniqueFoodnameChecker
  class MinimumQuantity
}

abstract class Food {
  # FoodCategory category
  # String foodName;
  # ExpiryDate expiryDate;
  # FoodStorageLocation storageLocation;
  # int quantity;
  ==
  .. Constructor ..
  + public Food(String, FoodCategory, String,
                    FoodStorageLocation, int)
  .. Util functions ..
  + String toString()
  + boolean isExpiring()
  .. Some Setter ..
  + void setExpiryDate(String)
  + void setQuantity(int quantity)
  .. Simple Getter ..
  + int getQuantity()
}

class ExpiryDate {
    - {static} DateTimeFormatter formatter
    # LocalDate expiry
    + ExpiryDate(String)
    + LocalDate getExpiry()
    + String toString()
}

Food ..> ExpiryDate

class Fridge {
    - ArrayList<Food> fridge
    + void add(Food)
    + int getSize()
    + Food getFood(int)
    + void editFoodQuantity(Food, Food)
    + ArrayList<Food> getFridge()
    + void clearFridge()
    + boolean isRunningOut(FoodCategory)
    + int getTotalQuantity(FoodCategory)
}

Fridge --> "*" Food : maintains >

class UniqueFoodnameChecker {
    - ArrayList<Food> fridge
    - Food foodToCheck
    - Food existingFood
    + UniqueFoodnameChecker(ArrayList<Food>, Food)
    + Food getExistingFood()
    + boolean isFoodnameUnique()
    + boolean isParamIdentical()
}

Fridge *-right- "UniqueFoodnameChecker" : uses >

enum FoodStorageLocation <<enumuration>> {
    FREEZER
    UPPER_SHELF
    MIDDLE_SHELF
    LOWER_SHELF
    DRAWERS
    FRIDGE_DOOR
    OTHER
    + {static} boolean contains(String)
    + {static} FoodStorageLocation convertStringToLocation(String)
}

Food .right.> FoodStorageLocation

enum FoodCategory <<enumuration>> {
    VEGETABLE
    FRUIT
    MEAT
    SEAFOOD
    EGG
    DAIRY
    BEVERAGE
    COOKED_DISH
    READY_TO_EAT
    FROZEN
    OTHER
    + {static} boolean contains(String)
    + {static} FoodCategory convertStringToFoodCategory(String)
    + {static} boolean isValidCategory(String)
}

Food .left.> FoodCategory

class MinimumQuantity {
    - {static} int vegetableMinimumQuantity
    - {static} int fruitMinimumQuantity
    - {static} int meatMinimumQuantity
    - {static} int seafoodMinimumQuantity
    - {static} int eggMinimumQuantity
    - {static} int dairyMinimumQuantity
    - {static} int beverageMinimumQuantity
    - {static} int cookedMinimumQuantity
    - {static} int readyMinimumQuantity
    - {static} int frozenMinimumQuantity
    - {static} int otherMinimumQuantity
    + {static} int getMinimumQuantity(FoodCategory)
    + {static} void setMinimumQuantity(FoodCategory, int)
}

Food ..> MinimumQuantity

@enduml